import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Trash2, Plus, Edit } from 'lucide-react';
import { User, ShoppingBag, MapPin, Lock, LogOut, Star} from 'lucide-react';
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';

const AccountPage = () => {
  const [activeTab, setActiveTab] = useState('H·ªì s∆° c√° nh√¢n');
  const [addresses, setAddresses] = useState([
    { id: 1, address: 'S·ªë nh√† 123, ƒê∆∞·ªùng ABC, Ph∆∞·ªùng XYZ, TP.HCM' },
    { id: 2, address: 'S·ªë nh√† 456, ƒê∆∞·ªùng DEF, Ph∆∞·ªùng UVW, TP.HCM' }
  ]);
  const [isAddingAddress, setIsAddingAddress] = useState(false);
  const { register, handleSubmit, formState: { errors }, watch } = useForm();
  const [editingAddressId, setEditingAddressId] = useState(null);

  const mockOrders = [
    {
      id: 'DH001',
      date: '2024-03-15',
      total: 250000,
      status: 'ƒê√£ Giao'
    },
    {
      id: 'DH002',
      date: '2024-04-02',
      total: 180000,
      status: 'ƒêang X·ª≠ L√Ω'
    }
  ];
  const handleAddAddress = (data) => {
    const newAddress = {
      id: editingAddressId || (addresses.length + 1),
      address: `${data.street}, ${data.ward}, ${data.district}, ${data.city}`
    };

    if (editingAddressId) {
      // Update existing address
      setAddresses(addresses.map(addr => 
        addr.id === editingAddressId ? newAddress : addr
      ));
      setEditingAddressId(null);
    } else {
      // Add new address
      setAddresses([...addresses, newAddress]);
    }

    setIsAddingAddress(false);
    reset();
  };

  const handleEditAddress = (address) => {
    // Split the address into components
    const [street, ward, district, city] = address.address.split(', ');

    // Set form values for editing
    setValue('street', street);
    setValue('ward', ward);
    setValue('district', district);
    setValue('city', city);

    setIsAddingAddress(true);
    setEditingAddressId(address.id);
  };

  const handleDeleteAddress = (id) => {
    setAddresses(addresses.filter(addr => addr.id !== id));
  };
  const membershipTiers = [
    {
      name: 'H·∫°ng V√†ng',
      description: (
        <ul>
          <li>Qu√† t·∫∑ng sinh nh·∫≠t: 100.000 F-Point</li>
          <li>∆Øu ƒë√£i freeship v√† m√£ gi·∫£m gi√°: 2 l·∫ßn</li>
          <li>T·ªâ l·ªá t√≠ch lu·ªπ F-Point tr√™n gi√° tr·ªã ƒë∆°n h√†ng: 1%</li>
        </ul>
      ),
      icon: 'ü•á',
      color: 'text-yellow-500'
    },
    {
      name: 'H·∫°ng B·∫°c', 
      description: (
        <ul>
          <li>Qu√† t·∫∑ng sinh nh·∫≠t: x</li>
          <li>∆Øu ƒë√£i freeship v√† m√£ gi·∫£m gi√°: x</li>
          <li>T·ªâ l·ªá t√≠ch lu·ªπ F-Point tr√™n gi√° tr·ªã ƒë∆°n h√†ng: 0,5%</li>
        </ul>
      ),
      icon: 'ü•à',
      color: 'text-gray-400'
    },
    {
      name: 'H·∫°ng Kim C∆∞∆°ng',
      description: (
        <ul>
          <li>Qu√† t·∫∑ng sinh nh·∫≠t: 300.000 F-Point</li>
          <li>∆Øu ƒë√£i freeship v√† m√£ gi·∫£m gi√°: 5 l·∫ßn</li>
          <li>T·ªâ l·ªá t√≠ch lu·ªπ F-Point tr√™n gi√° tr·ªã ƒë∆°n h√†ng: 2%</li>
        </ul>
      ),
      icon: 'üíé',
      color: 'text-blue-500'
    }
  ];

  const handleLogout = () => {
    // X·ª≠ l√Ω logic ƒëƒÉng xu·∫•t
    window.location.href = '/login';
    alert('B·∫°n ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh·ªèi t√†i kho·∫£n?'); 
    // Th√™m logic chuy·ªÉn h∆∞·ªõng ho·∫∑c x√≥a token ·ªü ƒë√¢y
  };


  const renderContent = () => {
    switch(activeTab) {
      case 'H·ªì s∆° c√° nh√¢n':
        return (
          <form className="space-y-4" onSubmit={handleSubmit(data => console.log(data))}>
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block mb-2">H·ªç T√™n</label>
                <input 
                  {...register('fullName', { required: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' })}
                  className="w-full border p-2 rounded"
                  defaultValue="Nguy·ªÖn VƒÉn A"
                />
                {errors.fullName && <p className="text-red-500">{errors.fullName.message}</p>}
              </div>
              <div>
                <label className="block mb-2">Email</label>
                <input 
                  {...register('email', { 
                    required: 'Vui l√≤ng nh·∫≠p email',
                    pattern: {
                      value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                      message: 'Email kh√¥ng h·ª£p l·ªá'
                    }
                  })}
                  className="w-full border p-2 rounded"
                  defaultValue="quynh.buiquynh@hcmut.edu.vn"
                />
                {errors.email && <p className="text-red-500">{errors.email.message}</p>}
              </div>
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block mb-2">Gi·ªõi T√≠nh</label>
                <select 
                  {...register('gender', { required: 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh' })}
                  className="w-full border p-2 rounded"
                  defaultValue=""
                >
                  <option value="" disabled>Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="Nam">Nam</option>
                  <option value="N·ªØ">N·ªØ</option>
                  <option value="Kh√°c">Kh√°c</option>
                </select>
                {errors.gender && <p className="text-red-500">{errors.gender.message}</p>}
              </div>
              <div>
                <label className="block mb-2">Ng√†y Sinh</label>
                <input 
                  {...register('birthdate', { 
                    required: 'Vui l√≤ng nh·∫≠p ng√†y sinh',
                    validate: (value) => {
                      const selectedDate = new Date(value);
                      const currentDate = new Date();
                      const minAge = new Date(currentDate.getFullYear() - 18, currentDate.getMonth(), currentDate.getDate());
                      return selectedDate <= minAge || 'B·∫°n ph·∫£i ƒë·ªß 18 tu·ªïi';
                    }
                  })}
                  type="date"
                  className="w-full border p-2 rounded"
                />
                {errors.birthdate && <p className="text-red-500">{errors.birthdate.message}</p>}
              </div>
            </div>
            <div>
              <label className="block mb-2">S·ªë ƒêi·ªán Tho·∫°i</label>
              <input 
                {...register('phone', { 
                  required: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i',
                  pattern: {
                    value: /^0[0-9]{9}$/,
                    message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'
                  }
                })}
                className="w-full border p-2 rounded"
                defaultValue="0912345678"
              />
              {errors.phone && <p className="text-red-500">{errors.phone.message}</p>}
            </div>
            <button 
              type="submit" 
              className="bg-blue-500 text-white px-6 py-2 rounded-full"
            >
              C·∫≠p Nh·∫≠t Th√¥ng Tin
            </button>
          </form>
        );
      
      case 'ƒê∆°n h√†ng c·ªßa t√¥i':
        return (
          <div className="space-y-4">
            {mockOrders.map(order => (
              <div 
                key={order.id} 
                className="border p-4 rounded-lg flex justify-between items-center"
              >
                <div>
                  <p className="font-bold">M√£ ƒê∆°n: {order.id}</p>
                  <p>Ng√†y: {order.date}</p>
                  <p>T·ªïng Ti·ªÅn: {order.total.toLocaleString()}ƒë</p>
                </div>
                <span 
                  className={`px-4 py-2 rounded-full ${order.status === 'ƒê√£ Giao' ? 'bg-green-500 text-white' : 'bg-yellow-500 text-white'}`}
                >
                  {order.status}
                </span>
              </div>
            ))}
          </div>
        );
      
        case 'ƒê·ªãa ch·ªâ':
    return (
      <div className="space-y-4">
        {addresses.map(addr => (
          <div 
            key={addr.id} 
            className="border p-4 rounded-lg flex justify-between items-center"
          >
            <p>{addr.address}</p>
            <div className="flex space-x-2">
              <button 
                onClick={() => handleEditAddress(addr)}
                className="text-blue-500 hover:bg-blue-100 p-2 rounded"
              >
                <Edit size={20} />
              </button>
              <button 
                onClick={() => handleDeleteAddress(addr.id)}
                className="text-red-500 hover:bg-red-100 p-2 rounded"
              >
                <Trash2 size={20} />
              </button>
            </div>
          </div>
        ))}
        
        {!isAddingAddress ? (
          <button 
            onClick={() => {
              setIsAddingAddress(true);
              setEditingAddressId(null);
              reset(); // Clear any previous form values
            }}
            className="w-full flex items-center justify-center border-2 border-dashed border-blue-500 text-blue-500 p-4 rounded-lg hover:bg-blue-50"
          >
            <Plus className="mr-2" /> Th√™m ƒê·ªãa Ch·ªâ M·ªõi
          </button>
        ) : (
          <form 
            onSubmit={handleSubmit(handleAddAddress)} 
            className="border p-4 rounded-lg space-y-4"
          >
            <div>
              <label className="block mb-2">S·ªë Nh√† & ƒê∆∞·ªùng</label>
              <input 
                {...register('street', { required: 'Vui l√≤ng nh·∫≠p s·ªë nh√† v√† ƒë∆∞·ªùng' })}
                className="w-full border p-2 rounded"
                placeholder="V√≠ d·ª•: S·ªë 123 ƒê∆∞·ªùng ABC"
              />
              {errors.street && <p className="text-red-500">{errors.street.message}</p>}
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block mb-2">Ph∆∞·ªùng/X√£</label>
                <input 
                  {...register('ward', { required: 'Vui l√≤ng nh·∫≠p ph∆∞·ªùng/x√£' })}
                  className="w-full border p-2 rounded"
                  placeholder="Nh·∫≠p ph∆∞·ªùng/x√£"
                />
                {errors.ward && <p className="text-red-500">{errors.ward.message}</p>}
              </div>
              <div>
                <label className="block mb-2">Qu·∫≠n/Huy·ªán</label>
                <input 
                  {...register('district', { required: 'Vui l√≤ng nh·∫≠p qu·∫≠n/huy·ªán' })}
                  className="w-full border p-2 rounded"
                  placeholder="Nh·∫≠p qu·∫≠n/huy·ªán"
                />
                {errors.district && <p className="text-red-500">{errors.district.message}</p>}
              </div>
            </div>
            <div>
              <label className="block mb-2">Th√†nh Ph·ªë/T·ªânh</label>
              <input 
                {...register('city', { required: 'Vui l√≤ng nh·∫≠p th√†nh ph·ªë/t·ªânh' })}
                className="w-full border p-2 rounded"
                placeholder="Nh·∫≠p th√†nh ph·ªë/t·ªânh"
              />
              {errors.city && <p className="text-red-500">{errors.city.message}</p>}
            </div>
            <div className="flex space-x-4">
              <button 
                type="submit"
                className="flex-1 bg-blue-500 text-white p-2 rounded-lg"
              >
                {editingAddressId ? 'C·∫≠p Nh·∫≠t ƒê·ªãa Ch·ªâ' : 'L∆∞u ƒê·ªãa Ch·ªâ'}
              </button>
              <button 
                type="button"
                onClick={() => {
                  setIsAddingAddress(false);
                  setEditingAddressId(null);
                  reset();
                }}
                className="flex-1 bg-gray-200 text-gray-700 p-2 rounded-lg"
              >
                H·ªßy
              </button>
            </div>
          </form>
        )}
      </div>
    );
      
      case 'Qu·∫£n l√≠ m·∫≠t kh·∫©u':
        return (
          <form className="space-y-4" onSubmit={handleSubmit(data => console.log(data))}>
            <div>
              <label className="block mb-2">M·∫≠t Kh·∫©u C≈©</label>
              <input 
                {...register('oldPassword', { required: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©' })}
                type="password"
                className="w-full border p-2 rounded"
              />
              {errors.oldPassword && <p className="text-red-500">{errors.oldPassword.message}</p>}
            </div>
            <div>
              <label className="block mb-2">M·∫≠t Kh·∫©u M·ªõi</label>
              <input 
                {...register('newPassword', { required: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi' })}
                type="password"
                className="w-full border p-2 rounded"
              />
              {errors.newPassword && <p className="text-red-500">{errors.newPassword.message}</p>}
            </div>
            <div>
              <label className="block mb-2">X√°c Nh·∫≠n M·∫≠t Kh·∫©u M·ªõi</label>
              <input 
                {...register('confirmNewPassword', { 
                  required: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi',
                  validate: value => value === watch('newPassword') || 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp'
                })}
                type="password"
                className="w-full border p-2 rounded"
              />
              {errors.confirmNewPassword && <p className="text-red-500">{errors.confirmNewPassword.message}</p>}
            </div>
            <button 
              type="submit" 
              className="bg-blue-500 text-white px-6 py-2 rounded-full"
            >
              ƒê·ªïi M·∫≠t Kh·∫©u
            </button>
          </form>
        );
        case '∆Øu ƒê√£i Th√†nh Vi√™n':
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold mb-4">∆Øu ƒê√£i Th√†nh Vi√™n</h2>
            {membershipTiers.map((tier, index) => (
              <div 
                key={index} 
                className="border p-6 rounded-lg flex items-center space-x-4"
              >
                <div className={`text-6xl ${tier.color}`}>
                  {tier.icon}
                </div>
                <div>
                  <h3 className={`text-xl font-semibold ${tier.color}`}>
                    {tier.name}
                  </h3>
                  <p className="text-gray-600 mt-2">
                    {tier.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto py-8">
      <div className="flex justify-center mb-4">
        <button 
          className={`px-4 py-2 rounded-tl-lg rounded-bl-lg ${activeTab === 'H·ªì s∆° c√° nh√¢n' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
          onClick={() => setActiveTab('H·ªì s∆° c√° nh√¢n')}
        >
          <User className="inline mr-2" /> H·ªì s∆° c√° nh√¢n
        </button>
        <button 
          className={`px-4 py-2 ${activeTab === 'ƒê∆°n h√†ng c·ªßa t√¥i' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
          onClick={() => setActiveTab('ƒê∆°n h√†ng c·ªßa t√¥i')}
        >
          <ShoppingBag className="inline mr-2" /> ƒê∆°n h√†ng c·ªßa t√¥i
        </button>
        <button 
          className={`px-4 py-2 ${activeTab === 'ƒê·ªãa ch·ªâ' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
          onClick={() => setActiveTab('ƒê·ªãa ch·ªâ')}
        >
          <MapPin className="inline mr-2" /> ƒê·ªãa ch·ªâ
        </button>
        <button 
          className={`px-4 py-2 ${activeTab === '∆Øu ƒê√£i Th√†nh Vi√™n' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
          onClick={() => setActiveTab('∆Øu ƒê√£i Th√†nh Vi√™n')}
        >
          <Star className="inline mr-2" /> ∆Øu ƒê√£i Th√†nh Vi√™n
        </button>
        <button 
          className={`px-4 py-2 ${activeTab === 'Qu·∫£n l√≠ m·∫≠t kh·∫©u' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
          onClick={() => setActiveTab('Qu·∫£n l√≠ m·∫≠t kh·∫©u')}
        >
          <Lock className="inline mr-2" /> Qu·∫£n l√≠ m·∫≠t kh·∫©u
        </button>
        <button 
          className="px-4 py-2 bg-red-500 text-white rounded-tr-lg rounded-br-lg"
          onClick={handleLogout}
        >
          <LogOut className="inline mr-2" />ƒêƒÉng Xu·∫•t
        </button>
      </div>
      <div className="bg-white p-6 rounded-lg shadow-lg">
        {renderContent()}
      </div>
    </div>
  );
};

export default AccountPage;